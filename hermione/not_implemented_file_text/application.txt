from flask import Flask, jsonify, make_response, request
try:  # Python 3.5+
   from http import HTTPStatus as StatusCodes
except ImportError:
   try:  # Python 3
       from http import client as StatusCodes
   except ImportError:  # Python 2
       import httplib as StatusCodes

from config import DevelopmentConfig, ProductionConfig
from api.endpoints import _api

# Define Flask app
application = Flask(__name__)
application.url_map.strict_slashes = False


# Choose config
application.config.from_object(ProductionConfig)

# Register blueprints
application.register_blueprint(_api)

# BAD_REQUEST
@application.errorhandler(400)
def bad_request(error):
    """Redirect all bad requests."""
    response = {
        "message": StatusCodes.BAD_REQUEST.phrase,
        "method": request.method,
        "status-code": StatusCodes.BAD_REQUEST,
        "url": request.url,
        }
    # Log
    #ml_logger.info(json.dumps(response, indent=4, sort_keys=True))
    return make_response(jsonify(response), response["status-code"])

@application.errorhandler(422)
def invalid_request(error):
    """Redirect all bad requests."""
    exc = getattr(error, "exc", None)
    response = {
        "message": str(exc.messages) if exc else "Invalid request.",
        "method": request.method,
        "status-code": error.code,
        "url": request.url,
        }
    # Log
    #ml_logger.info(json.dumps(response, indent=4, sort_keys=True))
    return make_response(jsonify(response), response["status-code"])


@application.errorhandler(401)
def authorization_error(error):
    response = {
        "message": "There was a problem authenticating your token.",
        "method": request.method,
        "status-code": 401,
        "url": request.url,
        }
    # Log
    #ml_logger.info(json.dumps(response, indent=4, sort_keys=True))
    return make_response(jsonify(response), response["status-code"])

# NOT_FOUND
@application.errorhandler(404)
def not_found(error):
    """Redirect all nonexistent URLS."""
    response = {
        "message": StatusCodes.NOT_FOUND.phrase,
        "method": request.method,
        "status-code": StatusCodes.NOT_FOUND,
        "url": request.url,
        }
    # Log
    #ml_logger.info(json.dumps(response, indent=4, sort_keys=True))
    return make_response(jsonify(response), response["status-code"])

# INTERNAL_SERVER_ERROR
@application.errorhandler(500)
def internal_server_error(error):
    """Internal server error."""
    response = {
        "message": StatusCodes.INTERNAL_SERVER_ERROR.phrase,
        "method": request.method,
        "status-code": StatusCodes.INTERNAL_SERVER_ERROR,
        "url": request.url,
        }
    # Log
    #ml_logger.info(json.dumps(response, indent=4, sort_keys=True))
    return make_response(jsonify(response), response["status-code"])
